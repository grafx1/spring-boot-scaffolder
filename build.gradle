plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'
    id 'application'
    id 'com.gradle.plugin-publish' version '1.3.1'
    id("io.github.gradle-nexus.publish-plugin") version "1.3.0"

}

group = 'io.github.grafx1.scaffolder'
version = '2.1.2'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.freemarker:freemarker:2.3.32'

    // D√©pendances pour les tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'

    // Ajout des d√©pendances n√©cessaires pour tester les composants g√©n√©r√©s
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-web:3.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.0'
    testImplementation 'org.mapstruct:mapstruct:1.6.3'
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    testImplementation 'com.h2database:h2:2.2.224'  // Base de donn√©es en m√©moire pour les tests
}

tasks.named('test') {
    useJUnitPlatform()
}

application {
    mainClass = 'io.github.grafx1.scaffolder.Main'
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'Spring Boot Scaffolder',
                'Implementation-Version': version,
                'Main-Class': application.mainClass.get()
        )
    }
}

gradlePlugin {
    website = 'https://github.com/grafx1/spring-boot-scaffolder'
    vcsUrl = 'https://github.com/grafx1/spring-boot-scaffolder.git'
    plugins {
        scaffoldPlugin {
            id = 'io.github.grafx1.scaffolder'
            implementationClass = 'io.github.grafx1.scaffolder.ScaffolderPlugin'
            displayName = 'Spring Boot scaffolding Plugin'
            description = 'Spring Boot scaffolding generator based on FreeMarker : Entity, DTO, Service, Controller...'
            tags.set(['spring', 'freemarker', 'scaffolding', 'spring-boot', 'boilerplate'])
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = 'spring-boot-scaffolder'
            version = project.version

            pom {
                name = 'Spring Boot Scaffolder Plugin'
                description = 'Generate layered architecture for Spring Boot (Entity, Mapper, Repository, DTO, Service, Controller)'
                url = 'https://github.com/grafx1/spring-boot-scaffolder'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'grafx1'
                        name = 'Moctar DIOP'
                        email = 'moctar.diop@live.fr'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/grafx1/spring-boot-scaffolder.git'
                    developerConnection = 'scm:git:ssh://github.com:grafx1/spring-boot-scaffolder.git'
                    url = 'https://github.com/grafx1/spring-boot-scaffolder'
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

// Rendre la signature conditionnelle
boolean isSigningEnabled = !project.hasProperty('skipSigning')

// D√©sactive compl√®tement la signature si skipSigning est pr√©sent
if (isSigningEnabled) {
    signing {
        useGpgCmd()
        sign publishing.publications
    }
} else {
    // Cr√©e une configuration de signature vide pour √©viter les erreurs
    // mais n'associe aucune t√¢che de signature r√©elle
    signing {
        required = false
        sign publishing.publications
    }

    // D√©sactive explicitement les t√¢ches de signature
    tasks.withType(Sign).configureEach {
        enabled = false
    }

    println "Signature GPG d√©sactiv√©e avec -PskipSigning"
}

// Corrige les d√©pendances entre les t√¢ches de signature et de publication
afterEvaluate {
    def signTasks = tasks.withType(Sign)
    def publishTasks = tasks.matching { it.name.startsWith("publish") }

    publishTasks.each { publishTask ->
        signTasks.each { signTask ->
            // Ajoute une d√©pendance explicite seulement si les t√¢ches partagent des artefacts
            publishTask.dependsOn(signTask)
        }
    }
}

import java.security.MessageDigest

def version = project.version
def artifactRoot = file("${System.getProperty("user.home")}/.m2/repository")
def artifactPath = new File(artifactRoot, "io/github/grafx1/scaffolder/spring-boot-scaffolder/${version}")
def outputDir = layout.buildDirectory.dir("central-bundle-temp").get().asFile

tasks.register('prepareCentralBundleFiles') {
    dependsOn 'publishMavenJavaPublicationToMavenLocal'

    doLast {
        println("üîß Preparing files from $artifactPath")
        outputDir.mkdirs()

        def relativePath = artifactPath.absolutePath - artifactRoot.absolutePath
        def targetBase = new File(outputDir, relativePath)

        targetBase.mkdirs()
        artifactPath.eachFile { file ->
            if (file.isFile()) {
                def destFile = new File(targetBase, file.name)
                destFile.bytes = file.bytes

                // Cr√©e les hashes .md5 et .sha1
                def md5 = MessageDigest.getInstance("MD5")
                md5.update(file.bytes)
                new File(targetBase, file.name + ".md5").text = md5.digest().encodeHex().toString()

                def sha1 = MessageDigest.getInstance("SHA-1")
                sha1.update(file.bytes)
                new File(targetBase, file.name + ".sha1").text = sha1.digest().encodeHex().toString()
            }
        }
    }
}



tasks.register('createCentralBundle', Zip) {
    dependsOn 'prepareCentralBundleFiles'

    from(layout.buildDirectory.dir("central-bundle-temp"))
    archiveFileName = 'central-bundle.zip'
    destinationDirectory = layout.buildDirectory
}

